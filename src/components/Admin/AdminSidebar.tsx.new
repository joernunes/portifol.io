import { useState, useEffect } from 'react';
import { X, HelpCircle, Home, Github, FileText, RotateCcw } from 'lucide-react';
import { PortfolioConfig } from '@/types/portfolio';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';

// Importing content components
import { PersonalTab } from './PersonalTab';
import { LinksTab } from './LinksTab';
import { SocialTab } from './SocialTab';
import { GalleryTab } from './GalleryTab';
import { JSONTab } from './JSONTab';

interface AdminSidebarProps {
  isOpen: boolean;
  onClose: () => void;
  config: PortfolioConfig;
  onSave: (config: PortfolioConfig) => boolean;
  onReset: () => void;
  onExport: () => void;
  onImport: (file: File) => Promise<boolean>;
  theme: 'dark';
  onToggleTheme: (theme: 'dark') => void;
}

export const AdminSidebar = ({
  isOpen,
  onClose,
  config,
  onSave,
  onReset,
  onExport,
  onImport,
  theme = 'dark',
  onToggleTheme = () => {}
}: AdminSidebarProps) => {
  const [editingConfig, setEditingConfig] = useState<PortfolioConfig>(config);
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState('personal');
  const [isImporting, setIsImporting] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (isOpen) {
      document.body.classList.add('no-scroll');
      setEditingConfig(config);
    } else {
      document.body.classList.remove('no-scroll');
    }
    return () => {
      document.body.classList.remove('no-scroll');
    };
  }, [isOpen, config]);

  const handleSave = () => {
    const success = onSave(editingConfig);
    if (success) {
      toast({
        title: 'Configurações salvas com sucesso!',
        description: 'Suas alterações foram salvas.',
      });
    } else {
      toast({
        title: 'Erro ao salvar',
        description: 'Ocorreu um erro ao salvar as configurações.',
        variant: 'destructive',
      });
    }
  };

  const handleCancel = () => {
    setEditingConfig(config);
    onClose();
  };

  const handleReset = () => {
    if (confirm('Tem certeza que deseja restaurar as configurações padrão? Esta ação não pode ser desfeita.')) {
      onReset();
      onClose();
    }
  };

  const handleImportClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    try {
      const success = await onImport(file);
      if (success) {
        toast({
          title: 'Configuração importada com sucesso!',
          description: 'Sua configuração foi importada com sucesso.',
        });
        onClose();
      }
    } catch (error) {
      toast({
        title: 'Erro ao importar',
        description: 'Ocorreu um erro ao importar a configuração.',
        variant: 'destructive',
      });
    } finally {
      setIsImporting(false);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <div 
        className="fixed inset-0 bg-black/50 z-40"
        onClick={onClose}
        aria-hidden="true"
      />
      
      <div className="fixed inset-y-0 right-0 w-full max-w-md bg-[#1E1E1E] z-50 flex flex-col overflow-y-auto">
        {/* Header */}
        <div className="sticky top-0 z-10 bg-[#1E1E1E] p-4 border-b border-[#3a3a3a] flex justify-between items-center">
          <h2 className="text-xl font-bold text-white">Configurações</h2>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-white p-1 rounded-full hover:bg-[#3a3a3a] transition-colors"
            aria-label="Fechar"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-4 space-y-6">
          {/* Tabs */}
          <div className="flex space-x-1 bg-[#2C2C2E] p-1 rounded-lg">
            {[
              { id: 'personal', label: 'Pessoal', icon: <Home className="w-4 h-4" /> },
              { id: 'links', label: 'Links', icon: <Link className="w-4 h-4" /> },
              { id: 'social', label: 'Redes Sociais', icon: <Share2 className="w-4 h-4" /> },
              { id: 'gallery', label: 'Galeria', icon: <Image className="w-4 h-4" /> },
              { id: 'json', label: 'JSON', icon: <Code className="w-4 h-4" /> },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-3 py-2 text-sm rounded-md transition-colors ${
                  activeTab === tab.id
                    ? 'bg-[#3A3A3C] text-white'
                    : 'text-gray-400 hover:text-white hover:bg-[#3A3A3C]/50'
                }`}
              >
                {tab.icon}
                <span>{tab.label}</span>
              </button>
            ))}
          </div>

          {/* Tab Content */}
          <div className="space-y-6">
            {activeTab === 'personal' && (
              <PersonalTab
                personalInfo={editingConfig.personalInfo}
                onChange={(personalInfo) =>
                  setEditingConfig({ ...editingConfig, personalInfo })
                }
              />
            )}

            {activeTab === 'links' && (
              <LinksTab
                links={editingConfig.links}
                onChange={(links) =>
                  setEditingConfig({ ...editingConfig, links })
                }
              />
            )}

            {activeTab === 'social' && (
              <SocialTab
                social={editingConfig.social}
                onChange={(social) =>
                  setEditingConfig({ ...editingConfig, social })
                }
              />
            )}

            {activeTab === 'gallery' && (
              <GalleryTab
                gallery={editingConfig.gallery}
                onChange={(gallery) =>
                  setEditingConfig({ ...editingConfig, gallery })
                }
              />
            )}

            {activeTab === 'json' && (
              <JSONTab
                config={editingConfig}
                onChange={(newConfig) => setEditingConfig(newConfig)}
              />
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="sticky bottom-0 bg-[#1E1E1E] border-t border-[#3a3a3a] p-4">
          <div className="flex justify-between items-center">
            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handleImportClick}
                disabled={isImporting}
              >
                {isImporting ? 'Importando...' : 'Importar'}
                <input
                  type="file"
                  ref={fileInputRef}
                  onChange={handleFileChange}
                  accept=".json"
                  className="hidden"
                />
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={onExport}
              >
                Exportar
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={handleReset}
                className="text-red-500 hover:text-red-500 hover:bg-red-500/10"
              >
                Restaurar Padrão
              </Button>
            </div>
            <div className="flex space-x-2">
              <Button variant="outline" onClick={handleCancel}>
                Cancelar
              </Button>
              <Button onClick={handleSave}>Salvar</Button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};
